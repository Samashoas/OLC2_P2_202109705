//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ILanguageListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class LanguageBaseListener : ILanguageListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] LanguageParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] LanguageParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.dcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDcl([NotNull] LanguageParser.DclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.dcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDcl([NotNull] LanguageParser.DclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VarImpExpr</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarImpExpr([NotNull] LanguageParser.VarImpExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VarImpExpr</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarImpExpr([NotNull] LanguageParser.VarImpExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VarImpNoExpr</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarImpNoExpr([NotNull] LanguageParser.VarImpNoExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VarImpNoExpr</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarImpNoExpr([NotNull] LanguageParser.VarImpNoExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ImpDer</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImpDer([NotNull] LanguageParser.ImpDerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ImpDer</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImpDer([NotNull] LanguageParser.ImpDerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSliceDcl([NotNull] LanguageParser.SliceDclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSliceDcl([NotNull] LanguageParser.SliceDclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceVacio</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSliceVacio([NotNull] LanguageParser.SliceVacioContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceVacio</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSliceVacio([NotNull] LanguageParser.SliceVacioContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MatrixDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMatrixDcl([NotNull] LanguageParser.MatrixDclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MatrixDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMatrixDcl([NotNull] LanguageParser.MatrixDclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StructVarDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructVarDcl([NotNull] LanguageParser.StructVarDclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StructVarDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructVarDcl([NotNull] LanguageParser.StructVarDclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.listaArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListaArg([NotNull] LanguageParser.ListaArgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.listaArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListaArg([NotNull] LanguageParser.ListaArgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncDcl([NotNull] LanguageParser.FuncDclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncDcl([NotNull] LanguageParser.FuncDclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructDcl([NotNull] LanguageParser.StructDclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructDcl([NotNull] LanguageParser.StructDclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structParams"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructParams([NotNull] LanguageParser.StructParamsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structParams"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructParams([NotNull] LanguageParser.StructParamsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcParams"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncParams([NotNull] LanguageParser.FuncParamsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcParams"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncParams([NotNull] LanguageParser.FuncParamsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.paramDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParamDcl([NotNull] LanguageParser.ParamDclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.paramDcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParamDcl([NotNull] LanguageParser.ParamDclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ExprStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprStmt([NotNull] LanguageParser.ExprStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExprStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprStmt([NotNull] LanguageParser.ExprStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PrintStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrintStmt([NotNull] LanguageParser.PrintStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PrintStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrintStmt([NotNull] LanguageParser.PrintStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStmt([NotNull] LanguageParser.BlockStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStmt([NotNull] LanguageParser.BlockStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStmt([NotNull] LanguageParser.IfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStmt([NotNull] LanguageParser.IfStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStmt([NotNull] LanguageParser.ForStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStmt([NotNull] LanguageParser.ForStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchStmt([NotNull] LanguageParser.SwitchStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchStmt([NotNull] LanguageParser.SwitchStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ContinueStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContinueStmt([NotNull] LanguageParser.ContinueStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ContinueStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContinueStmt([NotNull] LanguageParser.ContinueStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStmt([NotNull] LanguageParser.BreakStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStmt([NotNull] LanguageParser.BreakStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStmt([NotNull] LanguageParser.ReturnStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStmt([NotNull] LanguageParser.ReturnStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CaseClause</c>
	/// labeled alternative in <see cref="LanguageParser.switchCase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseClause([NotNull] LanguageParser.CaseClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CaseClause</c>
	/// labeled alternative in <see cref="LanguageParser.switchCase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseClause([NotNull] LanguageParser.CaseClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DefaultClause</c>
	/// labeled alternative in <see cref="LanguageParser.switchCase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefaultClause([NotNull] LanguageParser.DefaultClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DefaultClause</c>
	/// labeled alternative in <see cref="LanguageParser.switchCase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefaultClause([NotNull] LanguageParser.DefaultClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.rangeInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRangeInit([NotNull] LanguageParser.RangeInitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.rangeInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRangeInit([NotNull] LanguageParser.RangeInitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForInit([NotNull] LanguageParser.ForInitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForInit([NotNull] LanguageParser.ForInitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondition([NotNull] LanguageParser.ConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondition([NotNull] LanguageParser.ConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StructLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructLiteral([NotNull] LanguageParser.StructLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StructLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructLiteral([NotNull] LanguageParser.StructLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParens([NotNull] LanguageParser.ParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParens([NotNull] LanguageParser.ParensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MatrixUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMatrixUpdate([NotNull] LanguageParser.MatrixUpdateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MatrixUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMatrixUpdate([NotNull] LanguageParser.MatrixUpdateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] LanguageParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] LanguageParser.StringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StructAssignment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructAssignment([NotNull] LanguageParser.StructAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StructAssignment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructAssignment([NotNull] LanguageParser.StructAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AtoiStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtoiStmt([NotNull] LanguageParser.AtoiStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AtoiStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtoiStmt([NotNull] LanguageParser.AtoiStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOr([NotNull] LanguageParser.LogicalOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOr([NotNull] LanguageParser.LogicalOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MatrixAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMatrixAccess([NotNull] LanguageParser.MatrixAccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MatrixAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMatrixAccess([NotNull] LanguageParser.MatrixAccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] LanguageParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] LanguageParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StructAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructAccess([NotNull] LanguageParser.StructAccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StructAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructAccess([NotNull] LanguageParser.StructAccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LenMatrix</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLenMatrix([NotNull] LanguageParser.LenMatrixContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LenMatrix</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLenMatrix([NotNull] LanguageParser.LenMatrixContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayAccess([NotNull] LanguageParser.ArrayAccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayAccess([NotNull] LanguageParser.ArrayAccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] LanguageParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] LanguageParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MDmod</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMDmod([NotNull] LanguageParser.MDmodContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MDmod</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMDmod([NotNull] LanguageParser.MDmodContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalAnd([NotNull] LanguageParser.LogicalAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalAnd([NotNull] LanguageParser.LogicalAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquality([NotNull] LanguageParser.EqualityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquality([NotNull] LanguageParser.EqualityContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolean([NotNull] LanguageParser.BooleanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolean([NotNull] LanguageParser.BooleanContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StructUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructUpdate([NotNull] LanguageParser.StructUpdateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StructUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructUpdate([NotNull] LanguageParser.StructUpdateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ImplicitAddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImplicitAddSub([NotNull] LanguageParser.ImplicitAddSubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ImplicitAddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImplicitAddSub([NotNull] LanguageParser.ImplicitAddSubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceIndex</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSliceIndex([NotNull] LanguageParser.SliceIndexContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceIndex</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSliceIndex([NotNull] LanguageParser.SliceIndexContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSub([NotNull] LanguageParser.AddSubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSub([NotNull] LanguageParser.AddSubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeOfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeOfStmt([NotNull] LanguageParser.TypeOfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeOfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeOfStmt([NotNull] LanguageParser.TypeOfStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Relational</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelational([NotNull] LanguageParser.RelationalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Relational</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelational([NotNull] LanguageParser.RelationalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IncDec</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIncDec([NotNull] LanguageParser.IncDecContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IncDec</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIncDec([NotNull] LanguageParser.IncDecContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayUpdate([NotNull] LanguageParser.ArrayUpdateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayUpdate([NotNull] LanguageParser.ArrayUpdateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StructAccessInfo</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructAccessInfo([NotNull] LanguageParser.StructAccessInfoContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StructAccessInfo</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructAccessInfo([NotNull] LanguageParser.StructAccessInfoContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParseFloatStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParseFloatStmt([NotNull] LanguageParser.ParseFloatStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParseFloatStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParseFloatStmt([NotNull] LanguageParser.ParseFloatStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Integer</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInteger([NotNull] LanguageParser.IntegerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Integer</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInteger([NotNull] LanguageParser.IntegerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloat([NotNull] LanguageParser.FloatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloat([NotNull] LanguageParser.FloatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StringJoin</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringJoin([NotNull] LanguageParser.StringJoinContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StringJoin</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringJoin([NotNull] LanguageParser.StringJoinContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MatrixAppend</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMatrixAppend([NotNull] LanguageParser.MatrixAppendContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MatrixAppend</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMatrixAppend([NotNull] LanguageParser.MatrixAppendContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Append</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAppend([NotNull] LanguageParser.AppendContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Append</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAppend([NotNull] LanguageParser.AppendContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Len</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLen([NotNull] LanguageParser.LenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Len</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLen([NotNull] LanguageParser.LenContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Caller</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaller([NotNull] LanguageParser.CallerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Caller</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaller([NotNull] LanguageParser.CallerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegate([NotNull] LanguageParser.NegateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegate([NotNull] LanguageParser.NegateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRune([NotNull] LanguageParser.RuneContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRune([NotNull] LanguageParser.RuneContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall([NotNull] LanguageParser.CallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.call"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall([NotNull] LanguageParser.CallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgs([NotNull] LanguageParser.ArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.args"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgs([NotNull] LanguageParser.ArgsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStructArgs([NotNull] LanguageParser.StructArgsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structArgs"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStructArgs([NotNull] LanguageParser.StructArgsContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace analyzer
