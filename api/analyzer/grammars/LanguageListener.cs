//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ILanguageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.dcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDcl([NotNull] LanguageParser.DclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.dcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDcl([NotNull] LanguageParser.DclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VarImpExpr</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarImpExpr([NotNull] LanguageParser.VarImpExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VarImpExpr</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarImpExpr([NotNull] LanguageParser.VarImpExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VarImpNoExpr</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarImpNoExpr([NotNull] LanguageParser.VarImpNoExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VarImpNoExpr</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarImpNoExpr([NotNull] LanguageParser.VarImpNoExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ImpDer</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImpDer([NotNull] LanguageParser.ImpDerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ImpDer</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImpDer([NotNull] LanguageParser.ImpDerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceDcl([NotNull] LanguageParser.SliceDclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceDcl([NotNull] LanguageParser.SliceDclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceVacio</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceVacio([NotNull] LanguageParser.SliceVacioContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceVacio</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceVacio([NotNull] LanguageParser.SliceVacioContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatrixDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixDcl([NotNull] LanguageParser.MatrixDclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatrixDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixDcl([NotNull] LanguageParser.MatrixDclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructVarDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructVarDcl([NotNull] LanguageParser.StructVarDclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructVarDcl</c>
	/// labeled alternative in <see cref="LanguageParser.varDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructVarDcl([NotNull] LanguageParser.StructVarDclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.listaArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListaArg([NotNull] LanguageParser.ListaArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.listaArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListaArg([NotNull] LanguageParser.ListaArgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncDcl([NotNull] LanguageParser.FuncDclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncDcl([NotNull] LanguageParser.FuncDclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructDcl([NotNull] LanguageParser.StructDclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructDcl([NotNull] LanguageParser.StructDclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructParams([NotNull] LanguageParser.StructParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructParams([NotNull] LanguageParser.StructParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncParams([NotNull] LanguageParser.FuncParamsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcParams"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncParams([NotNull] LanguageParser.FuncParamsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.paramDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamDcl([NotNull] LanguageParser.ParamDclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.paramDcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamDcl([NotNull] LanguageParser.ParamDclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExprStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprStmt([NotNull] LanguageParser.ExprStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExprStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprStmt([NotNull] LanguageParser.ExprStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrintStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintStmt([NotNull] LanguageParser.PrintStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrintStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintStmt([NotNull] LanguageParser.PrintStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStmt([NotNull] LanguageParser.BlockStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStmt([NotNull] LanguageParser.BlockStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] LanguageParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] LanguageParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStmt([NotNull] LanguageParser.ForStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStmt([NotNull] LanguageParser.ForStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStmt([NotNull] LanguageParser.SwitchStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStmt([NotNull] LanguageParser.SwitchStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContinueStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStmt([NotNull] LanguageParser.ContinueStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContinueStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStmt([NotNull] LanguageParser.ContinueStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStmt([NotNull] LanguageParser.BreakStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStmt([NotNull] LanguageParser.BreakStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStmt([NotNull] LanguageParser.ReturnStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStmt([NotNull] LanguageParser.ReturnStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CaseClause</c>
	/// labeled alternative in <see cref="LanguageParser.switchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseClause([NotNull] LanguageParser.CaseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CaseClause</c>
	/// labeled alternative in <see cref="LanguageParser.switchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseClause([NotNull] LanguageParser.CaseClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DefaultClause</c>
	/// labeled alternative in <see cref="LanguageParser.switchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultClause([NotNull] LanguageParser.DefaultClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DefaultClause</c>
	/// labeled alternative in <see cref="LanguageParser.switchCase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultClause([NotNull] LanguageParser.DefaultClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.rangeInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRangeInit([NotNull] LanguageParser.RangeInitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.rangeInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRangeInit([NotNull] LanguageParser.RangeInitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForInit([NotNull] LanguageParser.ForInitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForInit([NotNull] LanguageParser.ForInitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] LanguageParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] LanguageParser.ConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructLiteral([NotNull] LanguageParser.StructLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructLiteral([NotNull] LanguageParser.StructLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] LanguageParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] LanguageParser.ParensContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatrixUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixUpdate([NotNull] LanguageParser.MatrixUpdateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatrixUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixUpdate([NotNull] LanguageParser.MatrixUpdateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] LanguageParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] LanguageParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructAssignment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructAssignment([NotNull] LanguageParser.StructAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructAssignment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructAssignment([NotNull] LanguageParser.StructAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AtoiStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtoiStmt([NotNull] LanguageParser.AtoiStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AtoiStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtoiStmt([NotNull] LanguageParser.AtoiStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOr([NotNull] LanguageParser.LogicalOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOr([NotNull] LanguageParser.LogicalOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatrixAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixAccess([NotNull] LanguageParser.MatrixAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatrixAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixAccess([NotNull] LanguageParser.MatrixAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] LanguageParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] LanguageParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructAccess([NotNull] LanguageParser.StructAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructAccess([NotNull] LanguageParser.StructAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LenMatrix</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLenMatrix([NotNull] LanguageParser.LenMatrixContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LenMatrix</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLenMatrix([NotNull] LanguageParser.LenMatrixContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAccess([NotNull] LanguageParser.ArrayAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAccess([NotNull] LanguageParser.ArrayAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] LanguageParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Identifier</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] LanguageParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MDmod</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMDmod([NotNull] LanguageParser.MDmodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MDmod</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMDmod([NotNull] LanguageParser.MDmodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAnd([NotNull] LanguageParser.LogicalAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAnd</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAnd([NotNull] LanguageParser.LogicalAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality([NotNull] LanguageParser.EqualityContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality([NotNull] LanguageParser.EqualityContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolean([NotNull] LanguageParser.BooleanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolean([NotNull] LanguageParser.BooleanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructUpdate([NotNull] LanguageParser.StructUpdateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructUpdate([NotNull] LanguageParser.StructUpdateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ImplicitAddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplicitAddSub([NotNull] LanguageParser.ImplicitAddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ImplicitAddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplicitAddSub([NotNull] LanguageParser.ImplicitAddSubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceIndex</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceIndex([NotNull] LanguageParser.SliceIndexContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceIndex</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceIndex([NotNull] LanguageParser.SliceIndexContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSub([NotNull] LanguageParser.AddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSub([NotNull] LanguageParser.AddSubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeOfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeOfStmt([NotNull] LanguageParser.TypeOfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeOfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeOfStmt([NotNull] LanguageParser.TypeOfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Relational</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational([NotNull] LanguageParser.RelationalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Relational</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational([NotNull] LanguageParser.RelationalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IncDec</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncDec([NotNull] LanguageParser.IncDecContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IncDec</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncDec([NotNull] LanguageParser.IncDecContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayUpdate([NotNull] LanguageParser.ArrayUpdateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayUpdate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayUpdate([NotNull] LanguageParser.ArrayUpdateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructAccessInfo</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructAccessInfo([NotNull] LanguageParser.StructAccessInfoContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructAccessInfo</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructAccessInfo([NotNull] LanguageParser.StructAccessInfoContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParseFloatStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParseFloatStmt([NotNull] LanguageParser.ParseFloatStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParseFloatStmt</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParseFloatStmt([NotNull] LanguageParser.ParseFloatStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Integer</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInteger([NotNull] LanguageParser.IntegerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Integer</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInteger([NotNull] LanguageParser.IntegerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat([NotNull] LanguageParser.FloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat([NotNull] LanguageParser.FloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringJoin</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringJoin([NotNull] LanguageParser.StringJoinContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringJoin</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringJoin([NotNull] LanguageParser.StringJoinContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MatrixAppend</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixAppend([NotNull] LanguageParser.MatrixAppendContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MatrixAppend</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixAppend([NotNull] LanguageParser.MatrixAppendContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Append</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAppend([NotNull] LanguageParser.AppendContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Append</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAppend([NotNull] LanguageParser.AppendContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Len</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLen([NotNull] LanguageParser.LenContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Len</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLen([NotNull] LanguageParser.LenContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Caller</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaller([NotNull] LanguageParser.CallerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Caller</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaller([NotNull] LanguageParser.CallerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegate([NotNull] LanguageParser.NegateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegate([NotNull] LanguageParser.NegateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRune([NotNull] LanguageParser.RuneContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRune([NotNull] LanguageParser.RuneContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] LanguageParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] LanguageParser.CallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgs([NotNull] LanguageParser.ArgsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.args"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgs([NotNull] LanguageParser.ArgsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructArgs([NotNull] LanguageParser.StructArgsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructArgs([NotNull] LanguageParser.StructArgsContext context);
}
} // namespace analyzer
